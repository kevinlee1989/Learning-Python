Day12

1. Class와 객체지향
(1) 클래스, 객체, 객체지향
    변수 : 하나의 값만 저장
    배열 : 여러 개의 값을 저장
    구조체(struct) : 여러 형태의 값을 저장
    클래스 : 여러 형태의 값 + 기능(function)

(2) 정의
    클래스(Class) : 설계도, 상상속에서만 존재하는 것
    객체(Object) : 설계도로 만든 실제 작품
    cf) Apple, An apple

(3) 용어
    1) 클래스
        값(변수)와 기능(함수)로 구성
        그런데 이를 부르는 품격있는 언어가 존재
    2) 메서드(Method)
        클래스가 가지고 있는 함수는 함수라고 하지 않고 메서드라고 함
    3) 변수(Field)
        클래스가 가지고 있는 변수는 필드라고 함, 변수라는 말을 더 많이 씀
    4) 객체(Object)
        클래스(설계도)로 만들어지는 것
        클래스를 정의하고 클래스()를 선언하면 객체 하나가 생성
    5) 인스턴스(Instance)
        한마디로 객체
        클래스와 관계를 표현할 때 인스턴스라는 말을 씀
        ex) 자동차 클래스의 객체 트럭1, 택시1
            트럭1 = 자동차()
            택시1 = 자동차()
            트럭1은 객체이다.
            트럭1은 자동차의 인스턴스이다.

(4) 클래스 정의 문법
    class ClassName:
        <statement1>
        .
        .
        .
        <statementN>

(5) 객체 생성 문법
    객체1 = ClassName()

(6) 첫 번째 클래스와 인스턴스 만들어보기
    class House:
        pass

    myhouse = House()

(7) 클래스의 변수
    1) 인스턴스 변수
       인스턴스 별로 다른 변수
       self.name과 같이 self.가 붙은 변수
    2) 클래스 변수
       클래스 내부에 선언된 변수
       모든 인스턴스가 공유하는 변수

(8) 생성자(Constructor)
    인스턴스가 만들어질 때 무조건 호출되는 함수
    메서드명은 __init__(self)
    인자(파라미터) 부분을 수정하면 수정한 대로 생성해야 함
    같은 이름으로 생성하면 마지막 것으로 overwrite

(9) DocString
    클래스 설명문
    클래스 선언 아래에 """ ~ """
    다른 곳에서 클래스명.__doc__ 으로 참조 가능

(10) self
    매서드(self, param1, param2)의 경우 실제 파라미터는 2개
    호출할 때 인스턴스명.메서드명으로 호출하라는 의미


2. 예외 처리
(1) 예외(Exception)
    오류인데, 개발자가 처리 가능한 오류
    처리불가능한 오류(Ex 문법오류, Out of Memory)

(2) 사례
    0으로 나눗셈을 하려는 경우
    a = int(input('나누어지는 수를 입력하세요'))
    b = int(input('나눌 수를 입력하세요'))

    if b == 0:
        print('you can not divide by 0')
    else:
        print('{}/{} = {}'.format(a, b, a/b)

    위와 같이 해결할 경우 모든 상황을 내가 다 알아야 처리 가능

(3) 예외는 클래스로 관리되며
    모든 예외는 BaseException을 상속받으며, Exception에 대부분의 예외가 포함

(4) 예외 처리 방식
    try:
        실행할 문장
    execpt 예외명 as e:
        예외명이 발생했을 때 처리할 문장
    .
    .
    .
    except:
        기타 예외 발생 시 처리 영역
    else:
        예외가 나지 않으면 수행할 문장
    finally:
        오류가 나든 안나든 무조건 수행할 문장

(5) 강제로 예외 발생시키기
    파이썬이 발생시키는 오류가 아니라 사용자가 발생시키고 싶을 경우
    raise 예외클래스()   # 예외 클래스는 Exception을 상속받은 나의 클래스
    또는
    raise 예외클래스('문장')













